{"version":3,"sources":["components/PostsList/PostsList.jsx","components/PostsList/PostsListTypes.jsx","components/Comments/CommentsTypes.jsx","api/posts.js","api/api.js","components/NewCommentForm/NewCommentForm.jsx","components/Comments/Comments.jsx","components/PostDetails/PostDetailsTypes.jsx","components/Loader/Loader.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostsList","PropTypes","arrayOf","shape","id","number","title","string","userId","func","postsList","selectedPostId","setSelectedPostId","className","map","post","key","type","onClick","CommentsTypes","comments","body","setComments","request","url","option","fetch","then","response","json","posts","data","getUserPosts","getPostComments","postId","NewCommentForm","useState","name","setName","email","setEmail","setBody","onSubmit","event","preventDefault","value","placeholder","onChange","target","comment","method","headers","JSON","stringify","result","Comments","React","memo","commentId","filter","element","propTypes","bool","Loader","PostDetails","postDetails","setPostDetails","loadingDetails","setLoadingDetails","hideComments","setHideComments","useEffect","getPostDetails","length","App","setPosts","isLoading","setIsLoading","userPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b112f89.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\nimport { PostsListTypes } from './PostsListTypes';\n\nexport const PostsList = ({ postsList, selectedPostId, setSelectedPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {postsList.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>{`[User #${post.userId}]: `}</b>\n            {post.title}\n          </div>\n          {selectedPostId === post.id\n            ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => setSelectedPostId(0)}\n              >\n                Close\n              </button>\n            )\n            : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => setSelectedPostId(post.id)}\n              >\n                Open\n              </button>\n            )\n          }\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = PostsListTypes;\n","import PropTypes from 'prop-types';\n\nexport const PostsListTypes = {\n  postsList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      userId: PropTypes.number,\n    }),\n  ),\n  selectedPostId: PropTypes.number,\n  setSelectedPostId: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\n\nexport const CommentsTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      body: PropTypes.string,\n      id: PropTypes.number,\n    }),\n  ),\n  setComments: PropTypes.func,\n};\n","import { BASE_URL } from './api';\n\nconst request = (url, option) => fetch(`${BASE_URL}${url}`, option)\n  .then(response => response.json())\n  .then(posts => posts.data);\n\nexport const getUserPosts = (\n  userId = '',\n) => {\n  const url = userId === ''\n    ? `/posts/${userId}`\n    : `/posts/?userId=${userId}`;\n\n  return request(url);\n};\n\nexport const getPostDetails = postId => request(`/posts/${postId}`);\n\nexport const getPostComments = postId => request(\n  `/comments/?postId=${postId}`,\n);\n\nexport const createPostComments = comment => request(`/comments`, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(comment),\n});\n\nexport const deletePostComment = commentId => request(\n  `/comments/${commentId}`,\n  {\n    method: 'DELETE',\n  },\n);\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { CommentsTypes } from '../Comments/CommentsTypes';\nimport { createPostComments, getPostComments } from '../../api/posts';\n\nexport const NewCommentForm = ({ setComments, postId }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const addNewComment = () => {\n    createPostComments({\n      name,\n      email,\n      body,\n      postId,\n    })\n      .then(() => {\n        getPostComments(postId)\n          .then(result => setComments(result));\n      });\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={addNewComment}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = CommentsTypes;\n","import React from 'react';\nimport { CommentsTypes } from './CommentsTypes';\n\nimport { deletePostComment } from '../../api/posts';\n\nexport const Comments = React.memo(({ comments, setComments }) => (\n  <ul className=\"PostDetails__list\">\n    {comments.map(comment => (\n      <li\n        key={comment.id}\n        className=\"PostDetails__list-item\"\n      >\n        <button\n          type=\"button\"\n          className=\"PostDetails__remove-button button\"\n          onClick={() => {\n            deletePostComment(comment.id);\n            setComments(comments.filter(element => element.id !== comment.id));\n          }}\n        >\n          X\n        </button>\n        <p>{comment.body}</p>\n      </li>\n    ))}\n  </ul>\n));\n\nComments.propTypes = CommentsTypes;\n","import PropTypes from 'prop-types';\n\nexport const PostDetailsTypes = {\n  postId: PropTypes.number,\n  loadingDetails: PropTypes.bool,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Comments } from '../Comments';\nimport './PostDetails.scss';\nimport { PostDetailsTypes } from './PostDetailsTypes';\n\nimport { getPostDetails, getPostComments } from '../../api/posts';\nimport { Loader } from '../Loader';\n\nexport const PostDetails = React.memo(({ postId }) => {\n  const [postDetails, setPostDetails] = useState({});\n  const [loadingDetails, setLoadingDetails] = useState(true);\n  const [comments, setComments] = useState([]);\n  const [hideComments, setHideComments] = useState(false);\n\n  useEffect(() => {\n    setLoadingDetails(false);\n    getPostDetails(postId)\n      .then((result) => {\n        setPostDetails(result);\n        setLoadingDetails(true);\n      });\n  }, [postId]);\n\n  useEffect(() => {\n    getPostComments(postId)\n      .then((result) => {\n        setComments(result);\n      });\n  }, [postId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {loadingDetails\n        ? (\n          <>\n            <section className=\"PostDetails__post\">\n              <p>{postDetails.title}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              {comments.length > 0 && (\n                !hideComments ? (\n                  <button\n                    type=\"button\"\n                    className=\"button\"\n                    onClick={() => setHideComments(true)}\n                  >\n                    Hide comments\n                  </button>\n                )\n                  : (\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={() => setHideComments(false)}\n                    >\n                      Show comments\n                    </button>\n                  )\n              )}\n              {!hideComments && (\n                <Comments\n                  comments={comments}\n                  setComments={setComments}\n                />\n              )}\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  setComments={setComments}\n                  postId={postId}\n                />\n              </div>\n            </section>\n          </>\n        )\n        : (\n          <Loader />\n        )\n      }\n    </div>\n  );\n});\n\nPostDetails.propTypes = PostDetailsTypes;\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Loader } from './components/Loader';\n\nimport { getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(false);\n    getUserPosts()\n      .then((userPosts) => {\n        setPosts(userPosts);\n        setIsLoading(true);\n      });\n  }, []);\n\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const handleSelectUser = (value) => {\n    setIsLoading(false);\n    getUserPosts(value === '0'\n      ? '' : value)\n      .then((userPosts) => {\n        setPosts(userPosts);\n        setSelectedPostId(0);\n        setIsLoading(true);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={event => handleSelectUser(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        {isLoading ? (\n          <div className=\"App__sidebar\">\n            <PostsList\n              postsList={posts}\n              selectedPostId={selectedPostId}\n              setSelectedPostId={setSelectedPostId}\n            />\n          </div>\n        )\n          : (\n            <Loader />\n          )}\n\n        {selectedPostId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails\n              postId={selectedPostId}\n            />\n          </div>\n        )\n        }\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}